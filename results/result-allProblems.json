{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of System.out or System.err",
  "severity": "High",
  "comment": "Uses of `System.out` should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/MySQLDBManager.java",
      "language": "JAVA",
      "line": 66,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 64,
        "length": 10,
        "offset": 98,
        "surroundingCode": "            if (res.next()) {\n                WAIT_TIMEOUT = res.getInt(\"Value\");\n                System.out.println(\"MySQL WAIT_TIMEOUT: \" + WAIT_TIMEOUT);\n            } else {\n                WAIT_TIMEOUT = -1;"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SystemOutErr"
  },
  "hash": "12f52a2ff57d50324e06cda72ca5f76b0b97b0920b387f52f5d633c5217dd4af"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of System.out or System.err",
  "severity": "High",
  "comment": "Uses of `System.out` should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/MySQLDBManager.java",
      "language": "JAVA",
      "line": 43,
      "offset": 21,
      "length": 10,
      "code": {
        "startLine": 41,
        "length": 10,
        "offset": 78,
        "surroundingCode": "                    return conn;\n                } else {\n                    System.out.println(\"MySQL TIMEOUT! WAIT_TIMEOUT: \" + WAIT_TIMEOUT + \" / DIFF: \" + diff);\n                }\n            }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SystemOutErr"
  },
  "hash": "8533dfb3b092cf71bf04d2f199de78cd195679129daf326fd77554f90d420cb0"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of System.out or System.err",
  "severity": "High",
  "comment": "Uses of `System.out` should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_UserDedDB.java",
      "language": "JAVA",
      "line": 37,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 35,
        "length": 10,
        "offset": 84,
        "surroundingCode": "            boolean bool = stmt.execute();\n            if (!bool) {\n                System.out.println(\"Event_UserDedDB: dead_at update failed\");\n            }\n        } catch (SQLException e) {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SystemOutErr"
  },
  "hash": "ce805d47d934248f17dfcf021ff2cc6ccc1550601a6a681f64c68734e92e5e65"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of System.out or System.err",
  "severity": "High",
  "comment": "Uses of `System.out` should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_MeetingVote.java",
      "language": "JAVA",
      "line": 373,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 371,
        "length": 10,
        "offset": 123,
        "surroundingCode": "                try (ResultSet res = stmt.executeQuery()) {\n                    if (!res.next()) {\n                        System.out.println(\"processCreateWaiting(): res.next false\");\n                        return;\n                    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SystemOutErr"
  },
  "hash": "b800c0235dcc8e8248f6820e535c26bbaa9654766ad9150361934a19aa9ef6e7"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of System.out or System.err",
  "severity": "High",
  "comment": "Uses of `System.out` should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_MeetingVote.java",
      "language": "JAVA",
      "line": 431,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 429,
        "length": 10,
        "offset": 123,
        "surroundingCode": "                try (ResultSet res = stmt.executeQuery()) {\n                    if (!res.next()) {\n                        System.out.println(\"processChangeCorners(): res.next false\");\n                        return;\n                    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SystemOutErr"
  },
  "hash": "17ad66c27884bfbe1c00f8f952e72f752493f0e24fb37f5013cafc9c2fa95a3c"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of System.out or System.err",
  "severity": "High",
  "comment": "Uses of `System.out` should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_MeetingVote.java",
      "language": "JAVA",
      "line": 503,
      "offset": 25,
      "length": 10,
      "code": {
        "startLine": 501,
        "length": 10,
        "offset": 123,
        "surroundingCode": "                try (ResultSet res = stmt.executeQuery()) {\n                    if (!res.next()) {\n                        System.out.println(\"processChangeOther(): res.next false\");\n                        return;\n                    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SystemOutErr"
  },
  "hash": "e2780eefa0a8caa32874e17b7eaab47f25b2b70bcc7607aacdeabf0dd0693581"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of System.out or System.err",
  "severity": "High",
  "comment": "Uses of `System.out` should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_MeetingVote.java",
      "language": "JAVA",
      "line": 526,
      "offset": 17,
      "length": 10,
      "code": {
        "startLine": 524,
        "length": 10,
        "offset": 76,
        "surroundingCode": "                }\n                stmt.setInt(i, citiesId);\n                System.out.println(\"SQL: \" + stmt);\n                stmt.executeUpdate();\n            }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SystemOutErr"
  },
  "hash": "b45f07735e2e441677a0c03db603be355cbbedd93fc8c8fe38e41bad55b75ba8"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Use of System.out or System.err",
  "severity": "High",
  "comment": "Uses of `System.out` should probably be replaced with more robust logging",
  "detailsInfo": "Reports usages of `System.out` or `System.err`.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code, or replaced by a more robust\nlogging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 325,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 323,
        "length": 10,
        "offset": 27,
        "surroundingCode": "            }\n\n            System.out.println(manager.getCommands());\n        } catch (InterruptedException | IOException | ClassNotFoundException e) {\n            e.printStackTrace();"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SystemOutErr"
  },
  "hash": "42917625a50fdcedc414669972428c28f481b470b272037ad9813d7fcf6b3dfa"
},{
  "tool": "Code Inspection",
  "category": "Class",
  "type": "Exception class name does not end with 'Exception'",
  "severity": "High",
  "comment": "Exception class name `UndefinedTranslateAPIUrl` does not end with 'Exception'",
  "detailsInfo": "Reports exception classes whose names don't end with `Exception`.\n\n**Example:** `class NotStartedEx extends Exception {}`\n\nA quick-fix that renames such classes is available only in the editor.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/Translate.java",
      "language": "JAVA",
      "line": 78,
      "offset": 18,
      "length": 24,
      "code": {
        "startLine": 76,
        "length": 24,
        "offset": 24,
        "surroundingCode": "    }\n\n    static class UndefinedTranslateAPIUrl extends RuntimeException {\n        public UndefinedTranslateAPIUrl() {\n            super(\"Translate API URL is not defined.\");"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ExceptionNameDoesntEndWithException"
  },
  "hash": "afb9bcdfacfb973dac91bfd4175a21e04ee68fddef6beeea5602e9528f5671ca"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/GameRole.java",
      "language": "JAVA",
      "line": 103,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 101,
        "length": 15,
        "offset": 180,
        "surroundingCode": "            games = Files.exists(pathMessages) ? new JSONObject(Files.readString(pathMessages)) : new JSONObject();\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "b7128aa9f2af1e8260d75bd7b38e7b7873df972cda5f66c8e59bf28312dd3c93"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/GameRole.java",
      "language": "JAVA",
      "line": 121,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 119,
        "length": 15,
        "offset": 180,
        "surroundingCode": "            games = Files.exists(pathMessages) ? new JSONObject(Files.readString(pathMessages)) : new JSONObject();\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "72396d02617a13a1ffdc00320db6d1bef7d8301c47680d28c30c7f62a2b8a6ba"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/GameRole.java",
      "language": "JAVA",
      "line": 61,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 59,
        "length": 15,
        "offset": 162,
        "surroundingCode": "            roles = Files.exists(path) ? new JSONArray(Files.readString(path)) : new JSONArray();\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            return false;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "4ced01d6850448e16f4908f116c6b5e6be641880e30d59aebd245b3cf267485a"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/GameRole.java",
      "language": "JAVA",
      "line": 84,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 82,
        "length": 15,
        "offset": 180,
        "surroundingCode": "            games = Files.exists(pathMessages) ? new JSONObject(Files.readString(pathMessages)) : new JSONObject();\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            return new ArrayList<>();\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "9fac08ce8ea2e76a65a555d133b111e85f051b850451f189b5345f9904cdcb87"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/GameRole.java",
      "language": "JAVA",
      "line": 72,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 70,
        "length": 15,
        "offset": 162,
        "surroundingCode": "            roles = Files.exists(path) ? new JSONArray(Files.readString(path)) : new JSONArray();\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "e12abd61eebe86518538b3b9472ebb7570e06c07b60f75e0ea145c12b0e824bd"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/GameRole.java",
      "language": "JAVA",
      "line": 141,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 139,
        "length": 15,
        "offset": 180,
        "surroundingCode": "            games = Files.exists(pathMessages) ? new JSONObject(Files.readString(pathMessages)) : new JSONObject();\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            return false;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "3813870801075f33615c1c1770a5e9bc09c85dde075a31358b30d7eec9fa06e0"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/Translate.java",
      "language": "JAVA",
      "line": 88,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 86,
        "length": 15,
        "offset": 151,
        "surroundingCode": "            return Language.valueOf(language.replace(\"-\", \"_\").toUpperCase(Locale.ROOT));\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n            return Language.UNKNOWN;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "271c6a2c3c1b4931e43d3f66aef01701dcd512d6a67b0ff2cd905729d745a74b"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/Translate.java",
      "language": "JAVA",
      "line": 73,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 71,
        "length": 15,
        "offset": 87,
        "surroundingCode": "            return getLanguage(language);\n        } catch (APIError e) {\n            e.printStackTrace();\n            return Language.UNKNOWN;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "6634ceb704c2b1c98ac96db22da7679da624c972a73b7cd2de454550900a556d"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/Translate.java",
      "language": "JAVA",
      "line": 57,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 55,
        "length": 15,
        "offset": 63,
        "surroundingCode": "            );\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "b6da0bfc44492b6089873d18be5587ba9a9953b6b2758038596e20e9b4422e47"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/HTTPServer.java",
      "language": "JAVA",
      "line": 46,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 44,
        "length": 15,
        "offset": 76,
        "surroundingCode": "            server.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "fd9a13ae74d0316d87a340cf92a4d9ae1fafc4575abb100eab144d8339f4e43b"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/SubAccount.java",
      "language": "JAVA",
      "line": 49,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 47,
        "length": 15,
        "offset": 63,
        "surroundingCode": "            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            exists = false;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "699e331bceb78c4d6a0602714d1960b2cd0974c5fc250c0f040686c33ead6a93"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/SubAccount.java",
      "language": "JAVA",
      "line": 63,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 61,
        "length": 15,
        "offset": 91,
        "surroundingCode": "            this.user = member.getUser();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            exists = false;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "b2432f8d052341b1253fb915f2d12304b0ca349aa4d4b340d3ff8201e9f9d998"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/WatchEmojis.java",
      "language": "JAVA",
      "line": 67,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 65,
        "length": 15,
        "offset": 62,
        "surroundingCode": "            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "20fe2d298d93f4aa6f9e7357868c8fa1c8df409bb2efe13c8c979191618dcf0e"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/WatchEmojis.java",
      "language": "JAVA",
      "line": 77,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 75,
        "length": 15,
        "offset": 112,
        "surroundingCode": "            Files.writeString(file.toPath(), array.toString());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "1568caf07a4029dda1fb33f062686bc8ca88ce050661eed68b124b85396d9549"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/JavajaotanConfig.java",
      "language": "JAVA",
      "line": 93,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 91,
        "length": 15,
        "offset": 129,
        "surroundingCode": "        } catch (IOException e) {\n            logger.warn(\"コンフィグファイル config.json を読み取れませんでした: \" + e.getMessage());\n            e.printStackTrace();\n            throw new RuntimeException();\n        } catch (JSONException e) {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "98a93e422e5cb56a3c0160d050667fcffe28f8c7e5f54918308fa2fb77f2fde5"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/lib/JavajaotanConfig.java",
      "language": "JAVA",
      "line": 97,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 95,
        "length": 15,
        "offset": 138,
        "surroundingCode": "        } catch (JSONException e) {\n            logger.warn(\"コンフィグファイル config.json の JSON 形式が正しくありません: \" + e.getMessage());\n            e.printStackTrace();\n            throw new RuntimeException();\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "d2420fc98348565fe309bd4590b5dc7e3638c41f58b01d95398913d6bf5034a3"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_659.java",
      "language": "JAVA",
      "line": 179,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 177,
        "length": 15,
        "offset": 209,
        "surroundingCode": "            return new LinkedList<>(time_object.keySet().stream().sorted(Comparator.comparingLong(Long::parseLong)).toList()).indexOf(String.valueOf(diff)) + 1;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return -1;"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "bb07fe0617df9dc08ed5bd59b831e21e98a479969fbec3acf1118ac3cb9467c6"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_UserDedDB.java",
      "language": "JAVA",
      "line": 40,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 38,
        "length": 15,
        "offset": 63,
        "surroundingCode": "            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "7a525228e2bab9de106caed31925850459f4c50220d7c9bc507e399b58be5d06"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_WarnUsers.java",
      "language": "JAVA",
      "line": 58,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 56,
        "length": 15,
        "offset": 112,
        "surroundingCode": "            channel.sendMessageEmbeds(builder.build()).queue();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "48304625b2118ad6e13b4464c71f6b8d51259c95814907479109f7220b32efd1"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_MeetingVote.java",
      "language": "JAVA",
      "line": 412,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 410,
        "length": 15,
        "offset": 63,
        "surroundingCode": "            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "181fbbb8335cf8b496d022e65eb8a2934cffbf337604cf48133cd4ef3fb3b94a"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_MeetingVote.java",
      "language": "JAVA",
      "line": 474,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 472,
        "length": 15,
        "offset": 63,
        "surroundingCode": "            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "81825f8d6dd96be7de9706dd05a550f52be097971a6117c4790f853382c2a610"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_MeetingVote.java",
      "language": "JAVA",
      "line": 581,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 579,
        "length": 15,
        "offset": 63,
        "surroundingCode": "            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "3f885993bbfea669263f6429c6d1e538a6e7fd2284d0f3d9b3ee75725f7432fa"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_MeetingVote.java",
      "language": "JAVA",
      "line": 559,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 557,
        "length": 15,
        "offset": 63,
        "surroundingCode": "            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "609f4b00c93101d597f74f7549862aa669618e26aeee0cc90021925afd5692e5"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_VC_Minerals.java",
      "language": "JAVA",
      "line": 67,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 65,
        "length": 15,
        "offset": 99,
        "surroundingCode": "            lastWarn = System.currentTimeMillis();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "e942a71de75b79708c9fe5369e042053a1060327e0ebedcc2ae7f66e1a7d4f86"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/event/Event_CheckNitroEmoji.java",
      "language": "JAVA",
      "line": 88,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 86,
        "length": 15,
        "offset": 104,
        "surroundingCode": "            Files.writeString(path, object.toString());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "bc77b072ca9e04137f186cfa5068f8d2342182ce551bb86cd0cc276abd865a84"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/tasks/Task_PermSync.java",
      "language": "JAVA",
      "line": 83,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 81,
        "length": 15,
        "offset": 93,
        "surroundingCode": "            conn = manager.getConnection();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            return;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "7a76e612a3c4eba0903a67eb2417cc168c2338d508b559454aa6b4ddffdef26c"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/tasks/Task_PermSync.java",
      "language": "JAVA",
      "line": 108,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 106,
        "length": 15,
        "offset": 62,
        "surroundingCode": "            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "336003d0b1b556222d16e494f628828637ab8582210d5c1977e4173964610e0e"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/tasks/Task_PermSync.java",
      "language": "JAVA",
      "line": 148,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 146,
        "length": 15,
        "offset": 81,
        "surroundingCode": "            return connections;\n        } catch (SQLException e) {\n            e.printStackTrace();\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "0049121a0c6755d411b7fb8eee04230bc829532b607cca8ee9eeff01e1bd472e"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/tasks/Task_PermSync.java",
      "language": "JAVA",
      "line": 335,
      "offset": 19,
      "length": 15,
      "code": {
        "startLine": 333,
        "length": 15,
        "offset": 75,
        "surroundingCode": "                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n                return null;\n            }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "69b10d398bfa2b5f06f433dcba37db83a4ca265c3e11041def9500eaef4c2d52"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/tasks/Task_MemberOrganize.java",
      "language": "JAVA",
      "line": 154,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 152,
        "length": 15,
        "offset": 81,
        "surroundingCode": "            return connections;\n        } catch (SQLException e) {\n            e.printStackTrace();\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "2e2ff65025a5f6c55b3d64b4cc10e786600a28c9d766c3e21a04c9c3405e69df"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/tasks/Task_MemberOrganize.java",
      "language": "JAVA",
      "line": 97,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 95,
        "length": 15,
        "offset": 93,
        "surroundingCode": "            conn = manager.getConnection();\n        } catch (SQLException e) {\n            e.printStackTrace();\n            return;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "d0cbfb2a15d93183cbf22892bf2c05ffd7536e956b96f2c3324a7ae2430d3ba1"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/tasks/Task_MemberOrganize.java",
      "language": "JAVA",
      "line": 543,
      "offset": 27,
      "length": 15,
      "code": {
        "startLine": 541,
        "length": 15,
        "offset": 145,
        "surroundingCode": "                        object = new JSONObject(Files.readString(path));\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "ce93a51f7b20df00d39d39db864f6228f5af7a52af2ab075756228499202eb39"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/tasks/Task_MemberOrganize.java",
      "language": "JAVA",
      "line": 479,
      "offset": 19,
      "length": 15,
      "code": {
        "startLine": 477,
        "length": 15,
        "offset": 75,
        "surroundingCode": "                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n                return null;\n            }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "a2cdf3b293760d7768e6e997f0743f42af4dae55de9c2c6a5a8d29f1aa661468"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/tasks/Task_SyncOtherServerPerm.java",
      "language": "JAVA",
      "line": 180,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 178,
        "length": 15,
        "offset": 76,
        "surroundingCode": "            return members;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "04d894207637ad041b8bf06f31d30f12f77058ee221773ad86f730494a71a936"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_Search.java",
      "language": "JAVA",
      "line": 124,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 122,
        "length": 15,
        "offset": 63,
        "surroundingCode": "            );\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "c4a1fc17425104b6106bd267fc9c67ba3e0f0f19939d65e64a7e5890b7699ac5"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GenText.java",
      "language": "JAVA",
      "line": 88,
      "offset": 23,
      "length": 15,
      "code": {
        "startLine": 86,
        "length": 15,
        "offset": 120,
        "surroundingCode": "            error -> {\n                channel.sendMessage(\"メッセージの生成に失敗しました。再度お試しください。\").queue();\n                error.printStackTrace();\n            }\n        );"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "1563e0cb964c061561c1bdb0a90abc5e0226099e9e5616e92ca1e8b2d363b405"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GenText.java",
      "language": "JAVA",
      "line": 71,
      "offset": 23,
      "length": 15,
      "code": {
        "startLine": 69,
        "length": 15,
        "offset": 120,
        "surroundingCode": "            error -> {\n                channel.sendMessage(\"メッセージの生成に失敗しました。再度お試しください。\").queue();\n                error.printStackTrace();\n            }\n        );"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "ee929111840fb843ab39acc2a1c0c302e15e9123273b8c73d634241dba0e350d"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GenText.java",
      "language": "JAVA",
      "line": 131,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 129,
        "length": 15,
        "offset": 95,
        "surroundingCode": "            reply.editMessage(output).queue();\n        } catch (IOException e) {\n            e.printStackTrace();\n            reply.editMessage(String.format(\"Error: IOエラーが発生 (%s)\", e.getMessage())).queue();\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "6c65d5c2c2ed450a483cc09695b2d3d24e92ed0c5d86bcddcacea20c1fc74332"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GameRole.java",
      "language": "JAVA",
      "line": 435,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 433,
        "length": 15,
        "offset": 180,
        "surroundingCode": "            games = Files.exists(pathMessages) ? new JSONObject(Files.readString(pathMessages)) : new JSONObject();\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            return;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "397133ef59c7ccf2f274e482cc9b92e5667150ee471d0c4c1afd45c650f921fc"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GameRole.java",
      "language": "JAVA",
      "line": 446,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 444,
        "length": 15,
        "offset": 111,
        "surroundingCode": "            Files.writeString(pathMessages, games.toString());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "54f74c02bd528b952a576987335e9f7ae1bd1423c08affc81fc7689c1d1a223b"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GameRole.java",
      "language": "JAVA",
      "line": 477,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 475,
        "length": 15,
        "offset": 180,
        "surroundingCode": "            games = Files.exists(pathMessages) ? new JSONObject(Files.readString(pathMessages)) : new JSONObject();\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            return;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "5c5abbdd7f39c2c015809f174393872e1d2ae79bd04accb957b5a8dcf583f9f3"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GameRole.java",
      "language": "JAVA",
      "line": 390,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 388,
        "length": 15,
        "offset": 162,
        "surroundingCode": "            roles = Files.exists(path) ? new JSONArray(Files.readString(path)) : new JSONArray();\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            message.reply(\n                \"ロールの作成に失敗しました: `%s`\".formatted(e.getMessage())"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "14970be8c915027ead8f35a3873a458a45dfabd3340e39bc7e821e1329c3e00e"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GameRole.java",
      "language": "JAVA",
      "line": 418,
      "offset": 27,
      "length": 15,
      "code": {
        "startLine": 416,
        "length": 15,
        "offset": 139,
        "surroundingCode": "                        Files.writeString(path, roles.toString());\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                },"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "1cfb0d050adafdb601f6ccf93a7c785674df47a3fb516efbd538f980f55669b5"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GameRole.java",
      "language": "JAVA",
      "line": 425,
      "offset": 23,
      "length": 15,
      "code": {
        "startLine": 423,
        "length": 15,
        "offset": 125,
        "surroundingCode": "                        \"ロールの作成に失敗しました: `%s`\".formatted(e.getMessage())\n                    ).queue();\n                    e.printStackTrace();\n                }\n            );"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "0656f31537a3fa09eecfe8b9a5e0f2ceee31833ad59c2ed72585df576cf77372"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GameRole.java",
      "language": "JAVA",
      "line": 455,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 453,
        "length": 15,
        "offset": 180,
        "surroundingCode": "            games = Files.exists(pathMessages) ? new JSONObject(Files.readString(pathMessages)) : new JSONObject();\n        } catch (IOException | JSONException e) {\n            e.printStackTrace();\n            return;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "3f92f221aa788b8abb1e9e6b622ec1273eec305c1ff46ef9896eb017b724f7c7"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GameRole.java",
      "language": "JAVA",
      "line": 468,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 466,
        "length": 15,
        "offset": 111,
        "surroundingCode": "            Files.writeString(pathMessages, games.toString());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "5e3a71d998a3295b06b942d1ad7734b8a756f3d6ab2c13e9ec460769262da61b"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_SearchImg.java",
      "language": "JAVA",
      "line": 126,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 124,
        "length": 15,
        "offset": 63,
        "surroundingCode": "            );\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "f06fa03a95aafdcfc6039ad993c42f0296015fffe3755a63ab9ca8478e79b6f9"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 414,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 412,
        "length": 15,
        "offset": 69,
        "surroundingCode": "            }\n        } catch (SchedulerException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "b17dd0f751e44796be693777903402555559fe474fd085808eb225d23065933a"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 83,
      "offset": 19,
      "length": 15,
      "code": {
        "startLine": 81,
        "length": 15,
        "offset": 135,
        "surroundingCode": "                developUserId = Long.parseLong(config.getString(\"builderId\"));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else if (new File(\"this-server-is-development\").exists()) {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "223870dcb73430b1a989810c4f7eb3851304848581b7b0e6690372d3c1b8b352"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 98,
      "offset": 19,
      "length": 15,
      "code": {
        "startLine": 96,
        "length": 15,
        "offset": 135,
        "surroundingCode": "                developGuildId = Long.parseLong(config.getString(\"guild_id\"));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "9c5cccca3626271d6d16a1098ff33562ba1a96af9c0d9c89380878889a651b20"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 122,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 120,
        "length": 15,
        "offset": 97,
        "surroundingCode": "            jda = jdabuilder.build().awaitReady();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return;\n        }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "aebcde270da50c50fa2743b2e92ec65c6ec206d0094b42792659090f63922342"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 356,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 354,
        "length": 15,
        "offset": 225,
        "surroundingCode": "        } catch (ClassNotFoundException | IOException | NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\n            getLogger().error(\"イベントの登録に失敗しました。\");\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "0b73c511b1a36179dcf8c823e4b11763af148fd5299dbc5e4d5f54ae64712fe0"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 481,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 479,
        "length": 15,
        "offset": 62,
        "surroundingCode": "            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "e4e4567ce5ba210c099da1f05683b666e044d062a591441f666377ad6e0f3732"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 227,
      "offset": 19,
      "length": 15,
      "code": {
        "startLine": 225,
        "length": 15,
        "offset": 264,
        "surroundingCode": "            manager.registerExceptionHandler(CommandExecutionException.class, (c, e) -> {\n                logger.info(\"CommandExecutionException: \" + e.getMessage() + \" (From \" + c.getUser().getAsTag() + \" in \" + c.getChannel().getName() + \")\");\n                e.printStackTrace();\n                if (c.getEvent().isPresent()) {\n                    if (isGuildDevelopMode && developGuildId != c.getEvent().get().getGuild().getIdLong()) {"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "52d4fef28479168bf357d498e3d1dba4416b87fd4c50683937678272777b6f50"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 321,
      "offset": 23,
      "length": 15,
      "code": {
        "startLine": 319,
        "length": 15,
        "offset": 241,
        "surroundingCode": "                } catch (NoSuchMethodException | InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                    getLogger().warn(String.format(\"%s: コマンドの登録に失敗しました。\", commandName));\n                    e.printStackTrace();\n                }\n            }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "ee64ca8e4bc1a7d44d547325dffe4d55839593dd201e9e414c617c089506eabb"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 327,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 325,
        "length": 15,
        "offset": 151,
        "surroundingCode": "            System.out.println(manager.getCommands());\n        } catch (InterruptedException | IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "4c8e012e084115e687382708cc6efa53c13b810258c3efb258df27d246289214"
},{
  "tool": "Code Inspection",
  "category": "Code maturity",
  "type": "Call to 'printStackTrace()'",
  "severity": "High",
  "comment": "Call to `printStackTrace()` should probably be replaced with more robust logging",
  "detailsInfo": "Reports calls to `Throwable.printStackTrace()` without arguments.\n\nSuch statements are often used for temporary debugging and should be either removed from the production code\nor replaced with a more robust logging facility.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/Main.java",
      "language": "JAVA",
      "line": 446,
      "offset": 15,
      "length": 15,
      "code": {
        "startLine": 444,
        "length": 15,
        "offset": 62,
        "surroundingCode": "            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "ThrowablePrintStackTrace"
  },
  "hash": "e15f16dc5892c1e9f9d931baaf7133c261a8ee49e84f5dbb9ede17963fd6ce4b"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Stream API call chain can be simplified",
  "severity": "High",
  "comment": "'collect(toList())' can be replaced with 'toList()'",
  "detailsInfo": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal.\n\n\nThe inspection replaces the following call chains:\n\n* `collection.stream().forEach()` → `collection.forEach()`\n* `collection.stream().collect(toList/toSet/toCollection())` → `new CollectionType<>(collection)`\n* `collection.stream().toArray()` → `collection.toArray()`\n* `Arrays.asList().stream()` → `Arrays.stream()` or `Stream.of()`\n* `IntStream.range(0, array.length).mapToObj(idx -> array[idx])` → `Arrays.stream(array)`\n* `IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))` → `list.stream()`\n* `Collections.singleton().stream()` → `Stream.of()`\n* `Collections.emptyList().stream()` → `Stream.empty()`\n* `stream.filter().findFirst().isPresent()` → `stream.anyMatch()`\n* `stream.collect(counting())` → `stream.count()`\n* `stream.collect(maxBy())` → `stream.max()`\n* `stream.collect(mapping())` → `stream.map().collect()`\n* `stream.collect(reducing())` → `stream.reduce()`\n* `stream.collect(summingInt())` → `stream.mapToInt().sum()`\n* `stream.mapToObj(x -> x)` → `stream.boxed()`\n* `stream.map(x -> {...; return x;})` → `stream.peek(x -> ...)`\n* `!stream.anyMatch()` → `stream.noneMatch()`\n* `!stream.anyMatch(x -> !(...))` → `stream.allMatch()`\n* `stream.map().anyMatch(Boolean::booleanValue)` → `stream.anyMatch()`\n* `IntStream.range(expr1, expr2).mapToObj(x -> array[x])` → `Arrays.stream(array, expr1, expr2)`\n* `Collection.nCopies(count, ...)` → `Stream.generate().limit(count)`\n* `stream.sorted(comparator).findFirst()` → `Stream.min(comparator)`\n* `optional.orElseGet(() -> { throw new ...; })` → `optional.orElseThrow()`\n\n\nNote that the replacements semantic may have minor difference in some cases. For example,\n`Collections.synchronizedList(...).stream().forEach()` is not synchronized while\n`Collections.synchronizedList(...).forEach()` is synchronized.\nAlso, `collect(Collectors.maxBy())` returns an empty `Optional` if the resulting element is\n`null` while `Stream.max()` throws `NullPointerException` in this case.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GameRole.java",
      "language": "JAVA",
      "line": 505,
      "offset": 14,
      "length": 28,
      "code": {
        "startLine": 503,
        "length": 28,
        "offset": 94,
        "surroundingCode": "            .map(Emote::getId)\n            .filter(s -> !usedEmojis.contains(s))\n            .collect(Collectors.toList());\n        List<Emote> emotes = new ArrayList<>();\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SimplifyStreamApiCallChains"
  },
  "hash": "04842f5aa709e4b4bc157c69e1dd9918e2455309e5b45845fd1f8b0109b2ae8a"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Stream API call chain can be simplified",
  "severity": "High",
  "comment": "'collect(toList())' can be replaced with 'toList()'",
  "detailsInfo": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal.\n\n\nThe inspection replaces the following call chains:\n\n* `collection.stream().forEach()` → `collection.forEach()`\n* `collection.stream().collect(toList/toSet/toCollection())` → `new CollectionType<>(collection)`\n* `collection.stream().toArray()` → `collection.toArray()`\n* `Arrays.asList().stream()` → `Arrays.stream()` or `Stream.of()`\n* `IntStream.range(0, array.length).mapToObj(idx -> array[idx])` → `Arrays.stream(array)`\n* `IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))` → `list.stream()`\n* `Collections.singleton().stream()` → `Stream.of()`\n* `Collections.emptyList().stream()` → `Stream.empty()`\n* `stream.filter().findFirst().isPresent()` → `stream.anyMatch()`\n* `stream.collect(counting())` → `stream.count()`\n* `stream.collect(maxBy())` → `stream.max()`\n* `stream.collect(mapping())` → `stream.map().collect()`\n* `stream.collect(reducing())` → `stream.reduce()`\n* `stream.collect(summingInt())` → `stream.mapToInt().sum()`\n* `stream.mapToObj(x -> x)` → `stream.boxed()`\n* `stream.map(x -> {...; return x;})` → `stream.peek(x -> ...)`\n* `!stream.anyMatch()` → `stream.noneMatch()`\n* `!stream.anyMatch(x -> !(...))` → `stream.allMatch()`\n* `stream.map().anyMatch(Boolean::booleanValue)` → `stream.anyMatch()`\n* `IntStream.range(expr1, expr2).mapToObj(x -> array[x])` → `Arrays.stream(array, expr1, expr2)`\n* `Collection.nCopies(count, ...)` → `Stream.generate().limit(count)`\n* `stream.sorted(comparator).findFirst()` → `Stream.min(comparator)`\n* `optional.orElseGet(() -> { throw new ...; })` → `optional.orElseThrow()`\n\n\nNote that the replacements semantic may have minor difference in some cases. For example,\n`Collections.synchronizedList(...).stream().forEach()` is not synchronized while\n`Collections.synchronizedList(...).forEach()` is synchronized.\nAlso, `collect(Collectors.maxBy())` returns an empty `Optional` if the resulting element is\n`null` while `Stream.max()` throws `NullPointerException` in this case.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_GameRole.java",
      "language": "JAVA",
      "line": 308,
      "offset": 14,
      "length": 28,
      "code": {
        "startLine": 306,
        "length": 28,
        "offset": 94,
        "surroundingCode": "            .map(Emote::getId)\n            .filter(s -> !usedEmojis.contains(s))\n            .collect(Collectors.toList());\n        List<Emote> emotes = new ArrayList<>();\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SimplifyStreamApiCallChains"
  },
  "hash": "91dd75a857f909339af65323b0f3d48689a81b2249af39db6d25816346676a0b"
},{
  "tool": "Code Inspection",
  "category": "Verbose or redundant code constructs",
  "type": "Stream API call chain can be simplified",
  "severity": "High",
  "comment": "'collect(toList())' can be replaced with 'toList()'",
  "detailsInfo": "Reports stream API call chains that can be simplified. Simplification will often avoid some temporary object creation during collection traversal.\n\n\nThe inspection replaces the following call chains:\n\n* `collection.stream().forEach()` → `collection.forEach()`\n* `collection.stream().collect(toList/toSet/toCollection())` → `new CollectionType<>(collection)`\n* `collection.stream().toArray()` → `collection.toArray()`\n* `Arrays.asList().stream()` → `Arrays.stream()` or `Stream.of()`\n* `IntStream.range(0, array.length).mapToObj(idx -> array[idx])` → `Arrays.stream(array)`\n* `IntStream.range(0, list.size()).mapToObj(idx -> list.get(idx))` → `list.stream()`\n* `Collections.singleton().stream()` → `Stream.of()`\n* `Collections.emptyList().stream()` → `Stream.empty()`\n* `stream.filter().findFirst().isPresent()` → `stream.anyMatch()`\n* `stream.collect(counting())` → `stream.count()`\n* `stream.collect(maxBy())` → `stream.max()`\n* `stream.collect(mapping())` → `stream.map().collect()`\n* `stream.collect(reducing())` → `stream.reduce()`\n* `stream.collect(summingInt())` → `stream.mapToInt().sum()`\n* `stream.mapToObj(x -> x)` → `stream.boxed()`\n* `stream.map(x -> {...; return x;})` → `stream.peek(x -> ...)`\n* `!stream.anyMatch()` → `stream.noneMatch()`\n* `!stream.anyMatch(x -> !(...))` → `stream.allMatch()`\n* `stream.map().anyMatch(Boolean::booleanValue)` → `stream.anyMatch()`\n* `IntStream.range(expr1, expr2).mapToObj(x -> array[x])` → `Arrays.stream(array, expr1, expr2)`\n* `Collection.nCopies(count, ...)` → `Stream.generate().limit(count)`\n* `stream.sorted(comparator).findFirst()` → `Stream.min(comparator)`\n* `optional.orElseGet(() -> { throw new ...; })` → `optional.orElseThrow()`\n\n\nNote that the replacements semantic may have minor difference in some cases. For example,\n`Collections.synchronizedList(...).stream().forEach()` is not synchronized while\n`Collections.synchronizedList(...).forEach()` is synchronized.\nAlso, `collect(Collectors.maxBy())` returns an empty `Optional` if the resulting element is\n`null` while `Stream.max()` throws `NullPointerException` in this case.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/java/com/jaoafa/javajaotan2/command/Cmd_ToRandJa.java",
      "language": "JAVA",
      "line": 65,
      "offset": 14,
      "length": 28,
      "code": {
        "startLine": 63,
        "length": 28,
        "offset": 126,
        "surroundingCode": "            .filter(l -> l != Translate.Language.AUTO)\n            .filter(l -> l != Translate.Language.UNKNOWN)\n            .collect(Collectors.toList());\n        Translate.Language lang1 = ignoreAutoUnknown.get(new Random().nextInt(ignoreAutoUnknown.size()));\n        Translate.Language lang2 = Translate.Language.JA;"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "SimplifyStreamApiCallChains"
  },
  "hash": "2f093c086574d56b333429251933c5c3acf6c0cc385c1347d989a737b894ae3a"
}]}
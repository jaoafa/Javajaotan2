{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "No module named 'argparse'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/resources/external_scripts/gentext/main.py",
      "language": "Python",
      "line": 1,
      "offset": 8,
      "length": 8,
      "code": {
        "startLine": 1,
        "length": 8,
        "offset": 7,
        "surroundingCode": "import argparse\nimport os\nimport time"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "22f524215ece421605153ec08303e94b80abf8ea40026af8e9c9baf7711f8a05"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "No module named 'os'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/resources/external_scripts/gentext/main.py",
      "language": "Python",
      "line": 2,
      "offset": 8,
      "length": 2,
      "code": {
        "startLine": 1,
        "length": 2,
        "offset": 23,
        "surroundingCode": "import argparse\nimport os\nimport time\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "712849abc0ef514786a2edfa02ff8f3a7915512bf59cb9c429c56ace32fa59d6"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "No module named 'time'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/resources/external_scripts/gentext/main.py",
      "language": "Python",
      "line": 3,
      "offset": 8,
      "length": 4,
      "code": {
        "startLine": 1,
        "length": 4,
        "offset": 33,
        "surroundingCode": "import argparse\nimport os\nimport time\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed\n"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "e583c51883bacfda3d2cfabf5dedbd2827aadafc9c7efc2d7af6d2ccd6b81419"
},{
  "tool": "Code Inspection",
  "category": "Python",
  "type": "Unresolved references",
  "tags": [
    "Sanity"
  ],
  "severity": "Critical",
  "comment": "Unresolved reference 'concurrent'",
  "detailsInfo": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n```\ndef print_string(s):\n  print(s.abc())\n```\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly.",
  "sources": [
    {
      "type": "file",
      "path": "src/main/resources/external_scripts/gentext/main.py",
      "language": "Python",
      "line": 4,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 2,
        "length": 10,
        "offset": 27,
        "surroundingCode": "import os\nimport time\nfrom concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor, as_completed\n\nimport markovify"
      }
    }
  ],
  "attributes": {
    "module": "project",
    "inspectionName": "PyUnresolvedReferencesInspection"
  },
  "hash": "487212c16c386fd14b3dd0fe07fbb17ba713afea1d5ac8a3c34387e2dc21de82"
}]}